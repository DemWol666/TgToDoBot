from telebot import types
from keyboards import *
from keyboards import tasks_Keyboard
from Utils import *


def initialization(bot):
    @bot.message_handler(commands=['start'])
    def start_message(message):
        bot.send_message(message.chat.id, '–≠—Ç–æ Avaka –±–æ—Ç', reply_markup=home_keyboard())
    
    @bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    def settings_message(message):
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∑–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.', reply_markup=settings_Keyboard())

    @bot.message_handler(func=lambda message: message.text in ['1 —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞', '2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞', '3 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞', '6 —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞'])
    def message_reminding_time(message):
        if set_reminding_time(message) != -1:
            bot.send_message(message.chat.id, '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
            start_message(message)

    @bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    def go_home_page(message):
        start_message(message)
    
    @bot.message_handler(func=lambda message: message.text == 'üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    def message_add_task(message):
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.')
        bot.register_next_step_handler(message, get_deadline)
    
    def get_deadline(message):
        task_text = message.text.strip()
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
        bot.register_next_step_handler(message, send_deadline, task_text)

    def send_deadline(message, task_text):
        result = save_task(message, task_text)
        bot.send_message(message.chat.id, result)
    
    @bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏')
    def message_show_tasks(message):
        response, num = show_tasks(message)
        bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=tasks_Keyboard(num))
        bot.send_message(message.chat.id, '‚¨ÖÔ∏è –ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=back_button())

    @bot.callback_query_handler(func=lambda call: call.data.startswith('editRem_'))
    def callback_edit_message(call):
        error_code, user_id, task_index, task_to_edit, response = edit_task(call)
        if error_code == 0:
            bot.answer_callback_query(call.id, response)
            bot.register_next_step_handler(call.message, message_edit_task, user_id, task_index, task_to_edit)
        else:
            bot.answer_callback_query(call.id, response)
    
    def message_edit_task(message, user_id, task_index, task_to_edit):
        new_text = message.text.strip()
        if not new_text:
            bot.send_message(message.chat.id, '‚ùå –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
            return
        response = process_edit_task(new_text, user_id, task_index, task_to_edit)
        bot.send_message(message.chat.id, response)
        show_tasks(message)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('complete_'))
    def message_complete_task(call):
        response, isError = complete_task(call)
        if isError == 0:
            bot.answer_callback_query(call.id, response)
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, response)

    @bot.message_handler(func=lambda message: message.text == 'üîû –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ621')
    def messege_ask_tags(message):
        bot.send_message(message.chat.id, 'üîé –û—Ç–ø—Ä–∞–≤—å –∂–µ–ª–∞–µ–º—ã–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=back_button())
        bot.register_next_step_handler(message, check_home)

    def check_home(message):
        if message.text.strip() == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            start_message(message)
        else:
            message_ask_summ(message)
    
    def message_ask_summ(message):
        tags = message.text.strip()
        bot.send_message(message.chat.id, 'üî¢ –í–≤–µ–¥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–µ –±–æ–ª–µ–µ 10)')
        bot.register_next_step_handler(message, message_check_valid_summ, tags)

    def message_check_valid_summ(message, tags):
        response, Error_code, limit = check_valid_summ(message)
        if Error_code == -1:
            bot.send_message(message.chat.id, response)
            bot.register_next_step_handler(message, message_check_valid_summ, tags)
        else:
            print(f'message_check_valid_summ {limit}')
            send_media(message, tags, limit)

    def send_media(message, tags, limit):
        media, code_number = handle_response(message, tags, limit)
        number = 0
        print(f'media content {media}')
        for content in media:
            if code_number[number] == 1:
                bot.send_video(message.chat.id, content, supports_streaming=True)
                number += 1
            elif code_number[number] == 2:
                bot.send_photo(message.chat.id, content)
                number += 1
            else:
                bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–∏—Ö —Ç–µ–≥–æ–≤ –Ω–µ—Ç/–û—Ç–≤–µ—Ç –ø—É—Å—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É /wolf")
        messege_ask_tags(message)


        





            


    

